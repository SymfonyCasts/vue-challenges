extending_instancedynamicdata:
  question: |
    Suppose we have a Vue component that looks like this:

    ```javascript
    const app = new Vue({
      el: '#app',
      template: '<span class="title">{{ title }}</span>
    });
    ```

    and you want to add `title` as a new "data" key to this component.
    How could we do that *and* set its initial value to `Vue challenge!`.
    How would you go about initializing this data?
  explanation: |
    That's right! `data` is a function that returns an object. The properties
    in this object will be accessible from the template! The function shorthand
    syntax - `data() {}` instead of `data: function() {}` - allows us to make our
    component more readable.
  features:
    multiple_choice:
      choices:
        a: |
          ```javascript
          data: `title='Vue challenge!'`,
          ```
        b: |
          ```javascript
          data() { return { title: 'Vue challenge!' }; },
          ```
        c: |
          ```javascript
          data() { title = 'Vue challenge!'; },
          ```
        d: |
          ```javascript
          data: 'Vue challenge!',
          ```
      correct: b

extending_singlefilecomponent:
  question: |
    Imagine you want to build a `.vue` single file component that renders a
    page header. It needs to have a `title` data key that it uses to render the
    template.

    Which one of these code snippets would accomplish this?
  explanation: |
    Correct! A vue single file component has at least 2 elements: a `<template>`
    tag that holds the template and a `<script>` tag that `export default`
    one object with the rest of the options.
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <h1>{{ title }}</h1>

          <script>
          const component = {
            name: 'TitleComponent',
            data: {
              title: '',
            },
          };
          </script>
          ```
        b: |
          ```vue
          <template>
            <h1>{{ title }}</h1>
          </template>

          <script>
          const name = 'TitleComponent';
          const data = {
            title: ''
          };
          </script>
          ```
        c: |
          ```vue
          <template>
            <h1>{{ title }}</h1>
          </template>

          <script>
          const name = 'TitleComponent';
          const data = function() {
            return {
              title: ''
            };
          };
          </script>
          ```
        d: |
          ```vue
          <template>
            <h1>{{ title }}</h1>
          </template>

          <script>
          export default {
            name: 'TitleComponent',
            data() {
              return { title: '' };
            },
          };
          </script>
          ```
      correct: d

extending_stylngacomponent:
  question: |
    What is the *minimum* code you need in a `<style>` tag (inside a `.vue`
    single file component) to make it modular?
  explanation: |
    That's right, the only thing you need to add make it
    modular is the `module` attribute! While a similar and valid option
    would be `scoped`, that would give you "scoped" CSS.
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <style module>
          </style>
          ```
        b: |
          ```vue
          <style lang="scss" module>
          </style>
          ```
        c: |
          ```vue
          <style type="module">
          </style>
          ```
        d: |
          ```vue
          <style scoped>
          </style>
          ```
      correct: a

extending_dataandvuedevtools:
  question: |
    Which of these is NOT a valid syntax to initialize a data object
    in Vue?
  explanation: |
    That's right! Data can be just an `Object`, or (more commonly) a function
    that *returns* an `Object`! Option "b" is proper syntax but doesn't return
    anything!
  features:
    multiple_choice:
      choices:
        a: |
          ```javascript
          data: {
            legend: "My Legend Goes Here!",
          },
          ```
        b: |
          ```javascript
          data: function() {
            const legend = "My Legend Goes Here!;
          },
        c: |
          ```javascript
          data(): {
            return {
              legend: "My Legend Goes Here!",
            };
          },
          ```
        d: |
          ```javascript
          data: () => ({
            legend: "My Legend Goes Here!",
          }),
          ```
      correct: b

extending_childcomponent:
  question: |
    Which of these is NOT a reason to consider breaking a component
    into smaller sub-components?
  explanation: |
    Correct! Splitting a component into smaller components can help you reuse code,
    isolate complex logic, or make your templates smaller and more readable. But
    this has no (significant) effect on the final size of your JavaScript code.
  features:
    multiple_choice:
      choices:
        a: Part of the component has a special functionality/logic.
        b: Part of the component needs to be reused in other parts of the application.
        c: Extracting part of the component will make its footprint smaller.
        d: Extracting part of a template into a sub-component will make it easier to read and understand.
      correct: c

extending_childcomponent2:
  question: |
    Suppose we have an empty component that looks like this:

    ```vue
    <template>
      <div></div>
    </template>

    <script>
    export default {
      name: 'MainComponent',
    };
    </script>

    We now want to import a child component (that lives at `@/components/title-component`)
    and render it inside `MainComponent`. What code would accomplish this?
    ```
  explanation: |
    Correct! First, you need to import the file that holds the Vue component
    (like normal JavaScript). Next, the `components` option is an *object* containing
    all of the components that you want to make *available* in the template. Once
    you've made it available, you can *use* it in the template!

    Fun fact: the reason `components` is an object is that you are *really* setting
    a key-value pair of components to make available. For example:

    ```
    export default {
      // ...
      components: {
          // this is short for TitleComponent: TitleComponent
          TitleComponent,

          // you won't do this, but it's legal to set any key to a component
          // this would allow us to use <foo /> in the template to render the title
          foo: TitleComponent
      },
    };
    ```
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <template>
            <div></div>
          </template>

          <script>
          import TitleComponent from '@/components/title-component';

          export default {
            name: 'MainComponent',
            components: {
              TitleComponent,
            },
          };
          </script>
          ```
        b: |
          ```vue
          <template>
            <div><title-component /></div>
          </template>

          <script>
          import TitleComponent from '@/components/title-component';

          export default {
            name: 'MainComponent',
            components: {
              TitleComponent,
            },
          };
          </script>
          ```
        c: |
          ```vue
          <template>
            <div><title-component /></div>
          </template>

          <script>
          import TitleComponent from '@/components/title-component';

          export default {
            name: 'MainComponent',
            components: [
              TitleComponent,
            ],
          };
          </script>
          ```
        d: |
          ```vue
          <template>
            <div><title-component /></div>
          </template>

          <script>
          export default {
            name: 'MainComponent',
            components: {
              TitleComponent,
            },
          };
          </script>
          ```
      correct: b

extending_instancedynamicdata:
  question: |
    Suppose we have a Vue component that looks like this:

    ```javascript
    const app = new Vue({
      el: '#app',
      template: '<span class="title">{{ title }}</span>
    });
    ```

    and you want to add `title` as a new "data" key to this component.
    How could we do that *and* set its initial value to `Vue challenge!`.
    How would you go about initializing this data?
  explanation: |
    That's right! `data` is a function that returns an object. The properties
    in this object will be accessible from the template! The function shorthand
    syntax - `data() {}` instead of `data: function() {}` - allows us to make our
    component more readable.
  features:
    multiple_choice:
      choices:
        a: |
          ```javascript
          data: `title='Vue challenge!'`,
          ```
        b: |
          ```javascript
          data() { return { title: 'Vue challenge!' }; },
          ```
        c: |
          ```javascript
          data() { title = 'Vue challenge!'; },
          ```
        d: |
          ```javascript
          data: 'Vue challenge!',
          ```
      correct: b

extending_singlefilecomponent:
  question: |
    Imagine our application has a `.vue` single file component that renders as
    the page title. It has a `title` data member that it uses to render the
    template.

    Which one of these code snippets would compile correctly into such
    component?
  explanation: |
    Correct! A vue single file component has at least 2 elements: a `<template>`
    tag that holds the template in place, and a `<script>` tag that `export default`
    one object with the rest of the options. Well done!
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <h1>{{ title }}</h1>

          <script>
          const component = {
            name: 'TitleComponent',
            data: {
              title: '',
            },
          };
          </script>
          ```
        b: |
          ```vue
          <template>
            <h1>{{ title }}</h1>
          </template>

          <script>
          const name = 'TitleComponent';
          const data = {
            title: ''
          };
          </script>
          ```
        c: |
          ```vue
          <template>
            <h1>{{ title }}</h1>
          </template>

          <script>
          const name = 'TitleComponent';
          const data = function() {
            return {
              title: ''
            };
          };
          </script>
          ```
        d: |
          ```vue
          <template>
            <h1>{{ title }}</h1>
          </template>

          <script>
          export default {
            name: 'TitleComponent',
            data() {
              return { title: '' };
            },
          };
          </script>
          ```
      correct: d

extending_dataandvuedevtools:
  question: |
    Which of these is NOT a valid syntax to initialize a data object
    in Vue?
  explanation: |
    That's right! Data can be just an `Object`, or a function *returning* an
    `Object`! The option selected is proper syntax but it does NOT return
    such `Object`.
  features:
    multiple_choice:
      choices:
        a: |
          ```javascript
          data: {
            legend: "My Legend Goes Here!",
          },
          ```
        b: |
          ```javascript
          data: function() {
            const legend = "My Legend Goes Here!;
          },
        c: |
          ```javascript
          data(): {
            return {
              legend: "My Legend Goes Here!",
            };
          },
          ```
        d: |
          ```javascript
          data: () => ({
            legend: "My Legend Goes Here!",
          }),
          ```
      correct: b

extending_childcomponent:
  question: |
    Which of these is NOT a general rule to consider breaking your components
    into sub-components?
  explanation: |
    Correct! The 3 main reasons to consider splitting a component are:
    - Encapsulating some special functionality
    - The component can be reused in some other part of the application
    - Extracing part of the logic to make it easier to understand
  features:
    multiple_choice:
      choices:
        a: A part of the component has a special functionality.
        b: Part of the component needs to be reused in other parts of the application.
        c: Extracing part of the component functionality will make its footprint smaller.
        d: Extracting part of a template into a sub-component will make it easier to read and understand.
      correct: c

extending_childcomponent2:
  question: |
    Suppose we have a main component and we want to import a child component called
    `TitleComponent` into it. Choose the option that would correctly import the component
    and have it show in the main component's template! If the main component were just a
    blank slate like:

    ```vue
    <template>
      <div></div>
    </template>

    <script>
    export default {
      name: 'MainComponent',
    };
    </script>
    ```

    And the component you need to import is located at `@/components/title-component`,
    what would the resulting code look like?
  explanation: |
    Correct! First, you need to import the file that holds the Vue component,
    next, declare it in the Vue options object. This is achieved by creating an
    `Object` with its properties set to the imported component. Third, make sure
    you include it in the template!
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <template>
            <div></div>
          </template>

          <script>
          import { TitleComponent } from '@/components/title-component';

          export default {
            name: 'MainComponent',
            components: {
              TitleComponent,
            },
          };
          </script>
          ```
        b: |
          ```vue
          <template>
            <div><title-component /></div>
          </template>

          <script>
          import { TitleComponent } from '@/components/title-component';

          export default {
            name: 'MainComponent',
            components: {
              TitleComponent,
            },
          };
          </script>
          ```
        c: |
          ```vue
          <template>
            <div><title-component /></div>
          </template>

          <script>
          import { TitleComponent } from '@/components/title-component';

          export default {
            name: 'MainComponent',
            components: [
              TitleComponent,
            ],
          };
          </script>
          ```
        d: |
          ```vue
          <template>
            <div><title-component /></div>
          </template>

          <script>
          export default {
            name: 'MainComponent',
            components: {
              TitleComponent,
            },
          };
          </script>
          ```
      correct: b

extending_modularcss:
  question: |
    What makes a `<style>` tag inside a `.vue` single file component modular?
  explanation: |
    That's right, the only thing you need to add to it in order to make it
    modular is the `module` attribute! While a similar and valid option
    would be `scoped`, this doesn't exactly compute into a "modular" style
    system using webpack.
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <style module>
          </style>
          ```
        b: |
          ```vue
          <style lang="scss" module>
          </style>
          ```
        c: |
          ```vue
          <style type="module">
          </style>
          ```
        d: |
          ```vue
          <style scoped>
          </style>
          ```
      correct: a

extending_instancedynamicdata:
  question: |
    Suppose we have a Vue component that looks like this:

    ```javascript
    const app = new Vue({
        el: '#app',
        template: '<span class="title">{{ title }}</span>
    });
    ```

    and you want to add `title` as a new "data" key to this component.
    How could we do that *and* set its initial value to `Vue challenge!`.
    How would you go about initializing this data?
  explanation: |
    That's right! `data` is a function that returns an object. The properties
    in this object will be accessible from the template! The function shorthand
    syntax - `data() {}` instead of `data: function() {}` - allows us to make our
    component more readable.
  features:
    multiple_choice:
      choices:
        a: |
          ```javascript
          data: `title='Vue challenge!'`,
          ```
        b: |
          ```javascript
          data() { return { title: 'Vue challenge!' }; },
          ```
        c: |
          ```javascript
          data() { title = 'Vue challenge!'; },
          ```
        d: |
          ```javascript
          data: 'Vue challenge!',
          ```
      correct: b

extending_singlefilecomponent:
  question: |
    Imagine you want to build a `.vue` single file component that renders a
    page header. It needs to have a `title` data key that it uses to render the
    template.

    Which one of these code snippets would accomplish this?
  explanation: |
    Correct! A vue single file component has at least 2 elements: a `<template>`
    tag that holds the template and a `<script>` tag that `export default`
    one object with the rest of the options.
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <h1>{{ title }}</h1>

          <script>
          const component = {
              name: 'TitleComponent',
              data: {
                  title: '',
              },
          };
          </script>
          ```
        b: |
          ```vue
          <template>
              <h1>{{ title }}</h1>
          </template>

          <script>
          const name = 'TitleComponent';
          const data = {
              title: ''
          };
          </script>
          ```
        c: |
          ```vue
          <template>
              <h1>{{ title }}</h1>
          </template>

          <script>
          const name = 'TitleComponent';
          const data = function() {
              return {
                  title: ''
              };
          };
          </script>
          ```
        d: |
          ```vue
          <template>
              <h1>{{ title }}</h1>
          </template>

          <script>
          export default {
              name: 'TitleComponent',
              data() {
                  return { title: '' };
              },
          };
          </script>
          ```
      correct: d

extending_dataandvuedevtools:
  question: |
    Which of these is NOT a valid way to initialize a data object
    in Vue?
  explanation: |
    That's right! Data can be just an `Object`, or (more commonly) a function
    that *returns* an `Object`! Option "b" is proper syntax but doesn't return
    anything!
  features:
    multiple_choice:
      choices:
        a: |
          ```javascript
          data: {
              legend: "My Legend Goes Here!",
          },
          ```
        b: |
          ```javascript
          data: function() {
              const legend = "My Legend Goes Here!;
          },
        c: |
          ```javascript
          data() {
              return {
                  legend: "My Legend Goes Here!",
              };
          },
          ```
        d: |
          ```javascript
          data: () => ({
              legend: "My Legend Goes Here!",
          }),
          ```
      correct: b

extending_childcomponent:
  question: |
    Which of these is NOT a reason to consider breaking a component
    into smaller sub-components?
  explanation: |
    Correct! Splitting a component into smaller components can help you reuse code,
    isolate complex logic, or make your templates smaller and more readable. But
    this has no (significant) effect on the final size of your JavaScript code.
  features:
    multiple_choice:
      choices:
        a: Part of the component has a special functionality/logic.
        b: Part of the component needs to be reused in other parts of the application.
        c: Extracting part of the component will make its footprint smaller.
        d: Extracting part of a template into a sub-component will make it easier to read and understand.
      correct: c

extending_childcomponent2:
  question: |
    Suppose we have an empty component that looks like this:

    ```vue
    <template>
        <div></div>
    </template>

    <script>
    export default {
        name: 'MainComponent',
    };
    </script>
    ```

    We now want to import a child component (that lives at `@/components/title-component`)
    and render it inside `MainComponent`. What code would accomplish this?
  explanation: |
    Correct! First, you need to import the file that holds the Vue component
    (like normal JavaScript). Next, the `components` option is an *object* containing
    all of the components that you want to make *available* in the template. Once
    you've made it available, you can *use* it in the template!

    Fun fact: the reason `components` is an object is that you are *really* setting
    a key-value pair of components to make available. For example:

    ```
    export default {
        // ...
        components: {
            // this is short for TitleComponent: TitleComponent
            TitleComponent,

            // you won't do this, but it's legal to set any key to a component
            // this would allow us to use <foo /> in the template to render the title
            foo: TitleComponent
        },
    };
    ```
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <template>
              <div></div>
          </template>

          <script>
          import TitleComponent from '@/components/title-component';

          export default {
              name: 'MainComponent',
              components: {
                  TitleComponent,
              },
          };
          </script>
          ```
        b: |
          ```vue
          <template>
              <div><title-component /></div>
          </template>

          <script>
          import TitleComponent from '@/components/title-component';

          export default {
              name: 'MainComponent',
              components: {
                  TitleComponent,
              },
          };
          </script>
          ```
        c: |
          ```vue
          <template>
              <div><title-component /></div>
          </template>

          <script>
          import TitleComponent from '@/components/title-component';

          export default {
              name: 'MainComponent',
              components: [
                  TitleComponent,
              ],
          };
          </script>
          ```
        d: |
          ```vue
          <template>
              <div><title-component /></div>
          </template>

          <script>
          export default {
              name: 'MainComponent',
              components: {
                  TitleComponent,
              },
          };
          </script>
          ```
      correct: b

extnding_passinginfotochild:
  question: |
    Suppose we have a shiny Title component that looks like this:

    ```vue
    <template>
        <div>{{ title }}</div>
    </template>

    <script>
    export default {
        name: 'TitleComponent',
    };
    </script>
    ```

    We want other components to be able to pass a `title` to this component as a prop.
    Which option would NOT be a valid way to define the `title` prop?
  explanation: |
    Correct! To define `props` for our component, we need to declare the
    component's `props` property. Its simplest form is an array
    of strings, where each string is a prop name!
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          export default {
              name: 'TitleComponent',
              props: ['title'],
          };
          ```
        b: |
          ```vue
          export default {
              name: 'TitleComponent',
              props: {
                  title: String,
              },
          };
          ```
        c: |
          ```vue
          export default {
              name: 'TitleComponent',
              props: {
                  title: {
                      type: String,
                  },
              },
          };
          ```
        d: |
          ```vue
          export default {
              name: 'TitleComponent',
              props: { 'title' : true },
          };
          ```
      correct: d

extnding_passinginfotochild2:
  question: |
    Ok! Say we have a TitleComponent that accepts a `title` prop.

    Imagine that we want to pass the string `Discount Broken Furniture` to it
    from a parent component. What's the correct way to do this in a template?
  explanation: |
    That's right! Props behave exactly like HTML attributes in Vue! The easiest
    way to pass down a prop is to just declare it staticaly as an attribute.
    In our next lesson, we explore the other way of passing a prop: Using the
    `v-bind` directive, which allows us to use JavaScript for dynamic prop values!
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <template>
              <title-component prop:title="Discount Broken Furniture" />
          </template>
          ```
        b: |
          ```vue
          <template>
              <title-component title="Discount Broken Furniture" />
          </template>
          ```
        c: |
          ```vue
          <template>
              <title-component title="'Discount Broken Furniture'" />
          </template>
          ```
        d: |
          ```vue
          <template>
              <title-component :title="Discount Broken Furniture" />
          </template>
          ```
      correct: b

extending_dynamicattributes:
  question: |
    Suppose we have a component named `TitleComponent` that is ready to be
    used. This component accepts a `title` prop and we want to populate it with
    the value of an imaginary data key called `categoryName`. Our main component
    looks like this:

    ```vue
    <template>
        <title-component />
    </template>

    <script>
    import TitleComponent from '@/components/title-component';

    export default {
        name: 'MainComponent',
        components: {
            TitleComponent
        },
        data() {
            return {
                categoryName: 'Broken Cups',
            }
        },
    };
    </script>
    ```

    How would you pass this value down to a property of `title-component`
    using the shortcut syntax?
  explanation: |
    Correct! When using the shortcut syntax - equivalent to `v-bind:title` - we're
    converting the attribute value into a JavaScript expression where we can
    access all our object's props and data members directly. So doing
    `:title="ourTitle"` will work just fine!
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <template>
              <title-component :title="categoryName" />
          </template>
          ```
        b: |
          ```vue
          <template>
              <title-component title="{{ categoryName }}" />
          </template>
          ```
        c: |
          ```vue
          <template>
              <title-component :title="{{ categoryName }}" />
          </template>
          ```
        d: |
          ```vue
          <template>
              <title-component :title="'categoryName'" />
          </template>
          ```
      correct: a

extending_dynamicattributes2:
  question: |
    Say we have a component with a prop `title` defined using the simple
    syntax:

    ```javascript
    props: ['title'],
    ```

    But now, we'd like Vue to be able to do some validation for us when
    the component is rendered: we want `title` to accept a String and to
    be required. How can we do this?
  explanation: |
    Correct! We *need* to pass an object whose members are equal to the names
    of our defined props. Each member is  itself another object with the
    options `type` - which can be equal to a JavaScript type object, like
    `String` - and `required`, which is a boolean.

    > When `required` is `false`, you can also define a `default` value using
    > that option.

    > Types are defined using JavaScript type classes, not its instantiated
    > objects. That's why `String` works but `String()`, `'String'`, `''`, or
    > `new String()` will fail!
  features:
    multiple_choice:
      choices:
        a: |
          ```javascript
          props: {
              title: {
                  type: String,
                  required,
              },
          },
          ```
        b: |
          ```javascript
          props: {
              title: [String, true],
          },
          ```
        c: |
          ```javascript
          props: {
              title: {
                  type: String,
                  required: true,
              },
          },
          ```
        d: |
          ```javascript
          props: {
              title: {
                  type: new String(),
                  required: true,
              },
          },
          ```
      correct: c

extending_modularcss:
  question: |
    What is the *minimum* code you need in a `<style>` tag (inside a `.vue`
    single file component) to make it modular?
  explanation: |
    That's right, the only thing you need to add to it in order to make it
    modular is the `module` attribute! While a similar and valid option
    would be `scoped` attribute, this doesn't exactly compute into a "modular"
    style system using webpack.
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <style module>
          </style>
          ```
        b: |
          ```vue
          <style lang="scss" module>
          </style>
          ```
        c: |
          ```vue
          <style type="module">
          </style>
          ```
        d: |
          ```vue
          <style scoped>
          </style>
          ```
      correct: a

extending_modularcss2:
  question: |
    Imagine we have a component with the following modular css:

    ```vue
    <style module>
    .component {
        background-color: red;
    }
    </style>
    ```

    What do we need to do in the template to grab this style class from
    inside our component template?
  explanation: |
    You did it!

    In order to access modular css, we *need* to use the `$style` variable using a v-bind
    directive! Style is actually an object with a property for every class defined
    in `<style>`.

    Each property is mapped to whatever that class ends up being in the final
    code!
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          class="$style.component"
          ```
        b: |
          ```vue
          :class="style.component"
          ```
        c: |
          ```vue
          class="style.component"
          ```
        d: |
          ```vue
          :class="$style.component"
          ```
      correct: d

extending_aliases:
  question: |
    Suppose you have this code:

    ```javascript
    import Legend from '@/components/legend';
    ```

    When you run the code, this successfully loads the
    `/assets/js/vue/components/legend.vue` file. How does this work?
  explanation: |
    Correct! We use `.addAliases()` in Webpack Encore to easily configure
    Webpack aliases for our project. In Vue, having the `@` alias set to the
    project's root directory is common practice!
  features:
    multiple_choice:
      choices:
        a: |
          Vue adds a shortcut where the `@` symbol resolves to the root directory
          where the top level component is created (e.g. `assets/js/vue`).
        b: |
          In Webpack, the `@` symbol gets you to the root of the "entry" file.
        c: |
          The project must have a Webpack Alias for `@` configured.
        d: |
          This project must have a Vue "directory root" set for the `@` symbol.
      correct: c

extending_vfor:
  question: |
    Suppose we have an imaginary component with the following data property:

    ```javascript
    data() {
        return {
            fruits: [
                'Banana',
                'Strawberry',
                'Pienapple',
                'Apple',
            ],
        };
    },
    ```

    Delicious! Now e want to loop through these fruits and show each of them in a `span`
    element. What's the best way to accomplish this?
  explanation: |
    That's correct! The `v-for` directive will produce copies of itself,
    each rendering one element in the array that you are looping through. The `:key`
    attribute helps Vue make better updates if the contents of `fruit` change!

    > Note you can also loop through Objects using this directive!
    > `v-for="(value, key) in object"` will do it!

    > If you are iterating through an Object and *still* need to get an index
    > number, you can use the syntax:
    > `v-for="(value, key, index) in object"`
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <span
              v-for="fruit in fruits"
          >
              {{ fruit }}
          </span>
          ```
        b: |
          ```vue
          <div v-for="(fruit, index) in fruits">
              <span
                  :key="index"
              >
                  {{ fruit }}
              </span>
          </div>
          ```
        c: |
          ```vue
          <span
              v-for="(fruit, index) in fruits"
              :key="index"
          >
              {{ fruit }}
          </span>
          ```
        d: |
          ```vue
          <span>
              {{ fruits.reduce((fruit, acc) => { acc += 'fruit '; }, ''); }}
          </span>
          ```
      correct: c

extending_v-on:
  question: |
    Let's imagine we have these two boolean variables: `collapsed` and `darkMode`
    and we want to change the width and color of an element based on the
    state of these. What is the correct way to accomplish this using a `style`
    attribute?
  explanation: |
    Correct! the `:style` special attribute accepts an object where you can make
    each of its properties correspond to a style rule. Then have its value be
    the result of any JavaScript expression!
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          :style="{
              width: collapsed ? '70px' : 'auto',
              color: darkMode ? 'white' : 'black',
              backgroundColor: darkMode ? 'black' : 'white',
          }"
          ```
        b: |
          ```vue
          :style="[
              { width: collapsed ? '70px' : 'auto' },
              { color: darkMode ? 'white' : 'black' },
              { backgroundColor: darkMode ? 'black' : 'white' },
          ]"
          ```
        c: |
          ```vue
          :style="`width: ${collapsed ? '70px' : 'auto'}; color: ${darkMode ? 'white' : 'black'}; backgroundColor: ${darkMode ? 'black' : 'white'}`"
          ```
        d: |
          ```vue
          style="{
              width: collapsed ? '70px' : 'auto',
              color: darkMode ? 'white' : 'black'
              backgroundColor: darkMode ? 'black' : 'white',
          }"
          ```
      correct: a

extending_v-on2:
  question: |
    Suppose you have a `promoText` data set to `Office chairs now have 33% less wheels`.
    In a template, you have this:

    ```vue
    <span v-text="promoText">
      <span>... and more text</span>
    </span>
    ```

    What will this template print?
  explanation: |
    That's right! A `v-text` directive present in an element will *ignore* any child
    elements you might add!
  features:
    multiple_choice:
      choices:
        a: |
          ```html
          <span text="Office chairs now have 33% less wheels">
              <span>... and more text</span>
          </span>
          ```
        b: |
          ```html
          <span>
              Office chairs now have 33% less wheels
              <span>... and more text</span>
          </span>
          ```
        c: |
          ```html
          <span>
              <span>Office chairs now have 33% less wheels</span>
              <span>... and more text</span>
          </span>
          ```
        d: |
          ```html
          <span>
              Office chairs now have 33% less wheels
          </span>
          ```
      correct: d

extending_v-on3:
  question: |
    Suppose we have a component where an element of its template looks like this:

    ```vue
    <button @click="onFormSubmit">Submit form!</button>
    ```

    How could we print `Form submit button clicked!` to the console each time
    this button is clicked?
  explanation: |
    That's right! On click, Vue will effectively call `this.onFormSubmit()`
    and adding a key inside your component's `methods` option is the way to
    add methods to your Vue instance.
  features:
    multiple_choice:
      choices:
        a: |
          ```javascript
          export default {
              methods() {
                  const onFormSubmit = function() {
                      console.log('Form submit button clicked!');
                  };

                  return onFormSubmit;
              }
          };
          ```
        b: |
          ```javascript
          export default {
              methods: {
                  onFormSubmit() {
                      console.log('Form submit button clicked!');
                  },
              },
          };
          ```
        c: |
          ```javascript
          export default {
              computed: {
                  onFormSubmit() {
                      console.log('Form submit button clicked!');
                  },
              },
          };
          ```
        d: |
          ```javascript
          export default {
              onFormSubmit() {
                  console.log('Form submit button clicked!');
              },
          };
          ```
      correct: b

extending_reactivity:
  question: |
    Generally speaking, how does Vue go about making your `data` and `props` members
    reactive? In other words: how is Vue smart enough to re-render components
    when `data` or `props` change?
  explanation: |
    That's right! Vue turns your `data` and `prop` members into getter and setter functions.
    When those properties are complex objects, it even does this recursively!
    When you access a key in `data` or `props`, Vue uses the getter to keep an
    internal list of all components thta *use* that key. And when you *set*
    a key on `data`, Vue is then able to notify all components that use that key.
    *Then* those components can re-render.

    Pretty cool, eh?
  features:
    multiple_choice:
      choices:
        a: |
          By running a scheduled task periodically in order to check for changes in the
          data structure of `data` and `props`.
        b: |
          By running `setInterval()` with a function that constantly re-renders your component.
          Because of the virtual DOM, this re-rendering is very efficient.
        c: |
          By turning all of your members into functions.
        d: |
          By turning all of your members into getters and setters.
      correct: d

extending-v-show:
  question: |
    Pizza time! Check out the following component where we need to hide or show
    a "Loading" message depending on a `loading` state.

    ```vue
    <template>
        <span>Loading...</span>

        <h1>Pizza Menu</h1>

        <pizza-menu-list />
    </template>

    <script>
    import PizzaMenuList from '@/components/pizza-menu-list';

    export default {
        name: 'MainComponent',
        components: {
            PizzaMenuList
        },
        data() {
            return {
                loading: true,
            };
        },
    };
    </script>
    ```

    What is the best way to hide and show the "Loading" `<span>`?
  explanation: |
    Exactly! Vue has a directive ready for just these sort of cases! We don't need to
    do anything fancy. Just use the `v-show` directive (or the `v-if` if changes would
    be more permanent) and the rest is handled by Vue!

    > Notice that the `:style` option is doing pretty much exactly what our `v-show`
    > directive ends up doing in the DOM, but `v-show` is much cleaner!
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <span>{{ loading ? 'Loading...' : '' }}</span>
          ```
        b: |
          ```vue
          <span :class="{ loading }">Loading...</span>
          ```
        c: |
          ```vue
          <span v-show="loading">Loading...</span>
          ```
        d: |
          ```vue
          <span :style="{ display: loading ? '' : 'none' }">Loading...</span>
          ```
      correct: c

extending-v-show-2:
  question: |
    What is the difference between the `v-show` and `v-if` directives?
  explanation: |
    Correct! While `v-show` will leave the elements in the DOM for a quick hide/show
    operation, `v-if` will completely render or remove the elements depending on
    its state.

    It *is* true that, if a complex section may not be displayed at *all* on initial
    load, using `v-if` is more performant because Vue spend *any* time rendering
    what's inside.
  features:
    multiple_choice:
      choices:
        a: |
          `v-show` uses a style rule to show or hide the Element in question, while
          `v-if` removes or appends the Element in the DOM.
        b: |
          `v-show` is used for faster render times, while `v-if` uses less resources.
        c: |
          `v-show` is used for showing or hiding elements in the dom, while `v-if`
          is used for control flow operations, much like in Twig.
        d: |
          They are two different ways to do the same thing
      correct: a

extending-v-show-3:
  question: |
    Let's say we have a class called `.controversial-flavor` in a modular css tag. We want
    to assign this class to an element in the template if our pizza cointains pineapple. For this,
    we've constructed a component like this:

    ```vue
    <template>
        <div :class="$style.component">
          <span>{{ pizza.name }}</span>
        </div>
    </template>

    <script>
    export default {
        name: 'PizzaName',
        props: ['pizza'],
    };
    </script>

    <style lang="scss" module>
    .component {
        width: 120px;
        display: inline-block

        .controversial-flavor {
            color: red;
        }
    }
    </style>
    ```

    We know that `pizza` has a property called `containsPineapple`, which is a boolean.
    How can we conditionally show the `.controversial-flavor` class if the pizza contains
    pineapple?
  explanation: |
    That's right! We're faced with the problem of, first, referencing a class whose name
    has a `-` in it, so we have to use `[]` around the `$style` variable:

    ```javascript
    $style['controversial-flavor']
    ```

    But that's not all! In order to include this property as an object *key*, we *again* need
    to enclose this in another pair of `[]`. The result is as the one you selected.
    It's ugly, but correct:

    ```javascript
    { [$style['controversial-flavor']] : pizza.containsPineapple }
    ```
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <span :class="{
              $style['controversial-flavor']: pizza.containsPineapple
          }">
              {{ pizza.name }}
          </span>
          ```
        b: |
          ```vue
          <span :class="{
              [$style['controversial-flavor']]: pizza.containsPineapple
          }">
              {{ pizza.name }}
          </span>
          ```
        c: |
          ```vue
          <span :class="{
              'controversial-flavor': pizza.containsPineapple
          }">
              {{ pizza.name }}
          </span>
          ```
        d: |
          ```vue
          <span :class="[
              'controversial-flavor', pizza.containsPineapple
          ]">
              {{ pizza.name }}
          </span>
          ```
      correct: b

extending_computed:
  question: |
    Let's say we have a component that contains two data properties: `firstName` and
    `lastName`. To make our lives easier, we want to display these names using a single
    `name` variable in the template:

    ```vue
    <template>
        <span :class="$style.component">{{ name }}</span>
    </template>
    ```

    What code would accomplish this in the best way?
  explanation: |
    That's right! `computed` is special for these type of issues. You would be able to access
    the computed property as if it were a reactive property *anywhere* in your component!

    For example, to access this computed property from a method, you can do:

    ```javascript
    this.name;
    ```

    That easy!

    > Make sure your computed property *returns* the end result as a value. Do not make the mistake
    > of assigning the end result to `this.name`, which is technically legal, becuase this would
    > cause and *endless* cascade of function calls, effectively hanging the browser until the
    > call stack limit is reached!
  features:
      multiple_choice:
        choices:
          a: |
            ```vue
            <script>
            export default {
                name: 'PersonComponent',
                data() {
                    return {
                        firstName: 'Ryan',
                        lastName: 'Weaver',
                        name: '',
                    },
                },
                mounted() {
                    this.name = this.firstName + ' ' + this.lastName;
                },
            };
            </script>
            ```
          b: |
            ```vue
            <script>
            export default {
                name: 'PersonComponent',
                data() {
                    return {
                        firstName: 'Ryan',
                        lastName: 'Weaver',
                    },
                },
                computed {
                    name() {
                        const name = this.firstName + ' ' + this.lastName;
                    },
                },
            };
            </script>
            ```
          c: |
            ```vue
            <script>
            export default {
                name: 'PersonComponent',
                data() {
                    return {
                        firstName: 'Ryan',
                        lastName: 'Weaver',
                    },
                },
                computed {
                    name() {
                        this.name = this.firstName + ' ' + this.lastName;
                    },
                },
            };
            </script>
            ```
          d: |
            ```vue
            <script>
            export default {
                name: 'PersonComponent',
                data() {
                    return {
                        firstName: 'Ryan',
                        lastName: 'Weaver',
                    },
                },
                computed {
                    name() {
                        return (this.firstName + ' ' + this.lastName);
                    },
                },
            };
            </script>
            ```
        correct: d

extending_whereshoulddatalive:
  question: |
    Let's say you have a component with a prop named `firstName` and you change it inside
    that component using a method like so:

    ```vue
    <template>
        <span>{{ name }}</span>
        <button @click="changeFirstName">Change First Name</button>
    </template>

    <script>
    export default {
        name: 'NameComponent',
        props: ['firstName', 'lastName'],
        computed: {
            name() {
                return this.firstName + ' ' + this.lastName;
            }
        },
        methods: {
            changeFirstName() {
                this.firstName = 'Beckett';
            },
        },
    };
    </script>
    ```

    What is wrong with this code?
  explanation: |
    That's right. While it is possible to mutate a prop, you should *never* do that!
    The appication will throw a warning and it will still work. But if `firstName`
    is stored as data in a parent component, it will now be out-of-sync with the
    `firstName` prop in this component! Worse, if the data changes in the parent
    component, it will *override* our mutated value.

    So, even though you "can", NEVER mutate a prop!
  features:
    multiple_choice:
      choices:
        a: |
          When you mutate a prop, you need to also emit an event so that the parent
          component is aware.
        b: |
          You shouldn't mutate a prop.
        c: |
          The `changeFirstName()` method must have an `event` argument.
        d: |
          `firstName` should be moved to `data`. Then, we should set its initial value to
          the `firstName` prop.
      correct: b

extending_emit:
  question: |
    Which of these examples will NOT emit an event called `button_click` when the button
    is clicked?
  explanation: |
    If you look closely, `:click` will not be executed because you are actually
    defining a dynamic attribute called `click` set to the `$emit` call. Well done!

    > You can call `$emit` from the template, or from methods in your
    > component.
  features:
    multiple_choice:
      choices:
        a: |
          ```vue
          <template>
              <button :click="$emit('button_click')" />
          </template>

          <script>
          export default {
              name: 'ButtonComponent',
          };
          </script>
          ```
        b: |
          ```vue
          <template>
              <button @click="$emit('button_click')" />
          </template>

          <script>
          export default {
              name: 'ButtonComponent',
          };
          </script>
          ```
        c: |
          ```vue
          <template>
              <button @click="onButtonClicked" />
          </template>

          <script>
          export default {
              name: 'ButtonComponent',
              methods: {
                  onButtonClicked() {
                      this.$emit('button_click');
                  },
              },
          };
          </script>
          ```
        d: |
          ```vue
          <template>
              <button v-on:click="onButtonClicked" />
          </template>

          <script>
          export default {
              name: 'ButtonComponent',
              methods: {
                  onButtonClicked() {
                      this.$emit('button_click');
                  },
              },
          };
          </script>
          ```
      correct: a

extending_ajaxwithaxios:
  question: |
    What is the purpose of the special `mounted()` function in Vue?
  explanation: |
    That's right. It's a special event callback that you can define in your
    components to do stuff *just after* a component is mounted in the DOM.

    This is very useful to perform stuff that needs DOM elements to be present.
    While this is not common in Vue, you might still need to get a reference
    to an Element directly.
  features:
    multiple_choice:
      choices:
        a: |
          It's purpose is to mount other components in the DOM when called
        b: |
          It's purpose is to execute code that results in DOM elements that will
          be mounted in the DOM
        c: |
          It's purpose is to execute code right after the component has been
          mounted in the DOM
        d: |
          It's purpose is to execute code on component initialization
      correct: c

extending_smartvsdumbcomponents:
  question: |
    In the world of Vue and React, what is the relationship between "Dumb" and
    "Smart" components?
  explanation: |
    Correct! Smart components are the logic bearing components, usually getting
    data from the server and preparing it in different ways, while dumb components
    only "present" that data to the user.

    This creates a pattern that's similar to controllers and templates in Symfony.
    A controller (smart component) contains logic and passes variables into a
    template (dumb component) that mostly just renders those.

    If you keep this idea in mind, it can help you keep your components more
    organized.
  features:
    multiple_choice:
      choices:
        a: |
          A smart component usually makes smart computations, while a dumb component
          does the more common tasks.
        b: |
          A smart component usually is in charge of doing the logic of the application,
          while a dumb component usually gets that data and renders it in a template.
        c: |
          A smart compponent usually is at the top of a component tree, while a dumb
          component is more at the bottom.
        d: |
          A smart component usually does AI related things, like image processing, while
          a dumb component handles the rest of the application logic.
      correct: b
